// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Community {
  id               Int               @id @default(autoincrement())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  name             String            @unique
  isPublic         Boolean           @default(false)
  interests        String[]
  members          CommunityRole[]
  Event            Event[]
  socialMediaLinks SocialMediaLink[]
  logoUrl          String?
  polls            Poll[]            @relation("CommunityPoll")
}

model CommunityRole {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  role        Role
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
}

enum SocialMediaType {
  FACEBOOK
  TWITTER
  INSTAGRAM
  LINKEDIN
  YOUTUBE
  OTHER
}

model SocialMediaLink {
  id          Int             @id @default(autoincrement())
  url         String
  type        SocialMediaType
  communityId Int
  community   Community       @relation(fields: [communityId], references: [id])
}

model Event {
  id                      Int                       @id @default(autoincrement())
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  name                    String
  description             String
  date                    DateTime
  location                String
  community               Community                 @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId             Int
  createdBy               User                      @relation("createdEvents", fields: [createdById], references: [id])
  createdById             Int
  updatedBy               User?                     @relation("updatedEvents", fields: [updatedById], references: [id])
  updatedById             Int?
  CallForPapers           CallForPapers[]
  CallForPapersFormat     CallForPapersFormat[]
  CallForPapersSubmission CallForPapersSubmission[]
}

model CallForPapers {
  id          Int                   @id @default(autoincrement())
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  title       String
  description String
  deadline    DateTime
  event       Event                 @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     Int
  formats     CallForPapersFormat[]
}

model CallForPapersFormat {
  id                      Int                       @id @default(autoincrement())
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  name                    String
  description             String
  duration                Int
  event                   Event                     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId                 Int
  CallForPapers           CallForPapers?            @relation(fields: [callForPapersId], references: [id])
  callForPapersId         Int?
  CallForPapersSubmission CallForPapersSubmission[]
}

model CallForPapersSubmission {
  id          Int                 @id @default(autoincrement())
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  title       String
  description String
  format      CallForPapersFormat @relation(fields: [formatId], references: [id], onDelete: Cascade)
  formatId    Int
  event       Event               @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     Int
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
}

model Poll {
  id          Int          @id @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  communityId Int
  community   Community    @relation("CommunityPoll", fields: [communityId], references: [id])
  options     PollOption[] @relation("PollOptions")
  votes       PollVote[]   @relation("PollVotes")
  startDate   DateTime?
  endDate     DateTime?
}

model PollOption {
  id     Int        @id @default(autoincrement())
  text   String
  pollId Int
  poll   Poll       @relation("PollOptions", fields: [pollId], references: [id], onDelete: Cascade)
  votes  PollVote[] @relation("OptionVotes")
  order  Int

  @@unique(name: "orderConstraint", [pollId, order])
  @@unique(name: "textConstraint", [pollId, text])
}

model PollVote {
  id        Int        @id @default(autoincrement())
  userId    Int
  user      User       @relation("UserPollVote", fields: [userId], references: [id])
  pollId    Int
  poll      Poll       @relation("PollVotes", fields: [pollId], references: [id], onDelete: Cascade)
  optionId  Int
  option    PollOption @relation("OptionVotes", fields: [optionId], references: [id])
  createdAt DateTime   @default(now())

  @@unique([userId, pollId, optionId])
}

model User {
  id                      Int                       @id @default(autoincrement())
  email                   String                    @unique
  password                String
  createdEvents           Event[]                   @relation("createdEvents")
  updatedEvents           Event[]                   @relation("updatedEvents")
  roles                   CommunityRole[]
  CallForPapersSubmission CallForPapersSubmission[]
  votes                   PollVote[]                @relation("UserPollVote")
}

enum Role {
  ADMIN
  MODERATOR
  MEMBER
  USER
}
